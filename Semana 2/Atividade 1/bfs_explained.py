# Curso: Intelig√™ncia Artificial - IFSP P√≥s Gradua√ß√£o
# Semana 2 - Atividade 1: Busca em Largura (BFS - Breadth-first search)
# ---------------------------------------------------------------
# Objetivo: Encontrar o caminho mais curto entre dois pontos em um grafo n√£o ponderado
# usando o algoritmo de Busca em Largura (Breadth-First Search - BFS)
# ---------------------------------------------------------------
# Conceito:
# BFS √© um algoritmo que explora todos os n√≥s de um grafo "em camadas":
#   1¬™ camada: os vizinhos do n√≥ inicial
#   2¬™ camada: os vizinhos dos vizinhos (n√£o visitados)
#   3¬™ camada: e assim por diante...
#
# Essa abordagem garante que o primeiro caminho encontrado at√© o destino
# √© o mais curto (em n√∫mero de arestas).
# ---------------------------------------------------------------
# Enunciado:
# Imagine que voc√™ faz parte de uma equipe de log√≠stica e precisa planejar a rota mais eficiente entre dois centros de distribui√ß√£o.
# A rede de rotas √© um mapa complexo, onde os centros s√£o os pontos e as estradas s√£o as conex√µes.
#
# Sua tarefa √© criar uma fun√ß√£o que encontre o caminho mais curto entre um ponto de partida e um destino.
# Consideramos "o caminho mais curto" como aquele que passa pelo menor n√∫mero de centros de distribui√ß√£o intermedi√°rios.
#
# O algoritmo de Busca em Largura (BFS) √© perfeito para isso, pois ele explora o mapa camada por camada a partir do ponto de in√≠cio,
# garantindo que o primeiro caminho que ele encontrar at√© o destino ser√° o mais curto.
#
# Requisitos da Fun√ß√£o:
# - Crie uma fun√ß√£o chamada encontrar_caminho_mais_curto.
# - A fun√ß√£o receber√° tr√™s argumentos:
#     mapa: Um dicion√°rio que representa o mapa de conex√µes (um grafo).
#     inicio: Uma string com o nome do local de partida.
#     destino: Uma string com o nome do local final.
# - A fun√ß√£o deve retornar uma lista de strings com a sequ√™ncia de locais no caminho mais curto.
# - Se n√£o for poss√≠vel chegar ao destino, a fun√ß√£o deve retornar uma lista vazia ([]).


from collections import deque
import json # Importando json para prints formatados e visuais


def encontrar_caminho_mais_curto(mapa, inicio, destino):
    """
    Esta fun√ß√£o utiliza o algoritmo de Busca em Largura (BFS) para encontrar o caminho mais curto
    entre dois centros de distribui√ß√£o em um grafo n√£o ponderado (o menor n√∫mero de conex√µes).

    Par√¢metros:
    - mapa: dicion√°rio representando o grafo (centros e suas conex√µes).
    - inicio: string representando o centro de partida.
    - destino: string representando o centro de destino.

    Retorna:
    - Lista com o caminho mais curto do 'inicio' ao 'destino'.
    - Lista vazia se n√£o houver caminho poss√≠vel.
    """

    print("=" * 60)
    print(f"üöÄ INICIANDO BUSCA EM LARGURA (BFS) de '{inicio}' para '{destino}'")
    print("-" * 60)

    # Caso especial: se o ponto de partida for igual ao destino
    if inicio == destino:
        print(f"‚úÖ Partida ('{inicio}') √© igual ao Destino ('{destino}'). Caminho: [{inicio}]")
        return [inicio]

    # -----------------------------------------------------------------------------------------
    # ESTRUTURAS DE DADOS ESSENCIAIS PARA BFS
    # -----------------------------------------------------------------------------------------

    # Conjunto para armazenar os centros j√° visitados
    # @@TODO: Entender mais sobre uso de Conjunto e set e funcionamento neste contexto
    # CONCEITO: Um 'set' (conjunto) √© uma cole√ß√£o de itens desordenada, imut√°vel (para seus elementos) e que N√ÉO permite duplicatas.
    # FUN√á√ÉO NO BFS: Usamos um 'set' (visitados) para ter O(1) (tempo constante) na checagem se um centro j√° foi visitado.
    # Isso impede que o algoritmo entre em loops infinitos em grafos com ciclos e garante que cada centro seja processado uma √∫nica vez
    # na camada correta (a mais pr√≥xima do in√≠cio).
    visitados = set([inicio])
    print(f"üó∫Ô∏è  Centros Visitados (set): {visitados} (Come√ßa com o 'inicio')")

    # Dicion√°rio para armazenar o "pai" de cada n√≥ visitado, usado para reconstruir o caminho
    # @@TODO: Entender mais sobre dicion√°rio e funcionamento neste contexto
    # CONCEITO: Um 'dicion√°rio' (dict) armazena pares de chave:valor. Acesso e inser√ß√£o s√£o O(1) (tempo constante).
    # FUN√á√ÉO NO BFS: O dicion√°rio 'pais' armazena de onde viemos para chegar a um n√≥. Por exemplo, se 'B' foi visitado a partir de 'A',
    # teremos 'pais['B'] = 'A''. Isso nos permite, ao encontrar o destino, retroceder do destino ao in√≠cio.
    pais = {}
    print(f"üå≥ Rela√ß√£o Pai-Filho (dict): {pais} (Vazio, ser√° preenchido durante a busca)")

    # Fila para controlar os centros a serem visitados (estrutura FIFO - First In, First Out)
    # CONCEITO: 'deque' (Double-Ended Queue) √© uma fila eficiente para adicionar/remover elementos no in√≠cio e fim.
    # FUN√á√ÉO NO BFS: A Fila garante a explora√ß√£o por "camadas". O n√≥ adicionado primeiro √© explorado primeiro.
    # Isso √© o que garante que o primeiro caminho encontrado ser√° o mais curto (em n√∫mero de passos).
    fila = deque([inicio])
    print(f"‚û°Ô∏è  Fila de Explora√ß√£o (deque): {list(fila)} (Come√ßa com o 'inicio')")
    print("-" * 60)
    # -----------------------------------------------------------------------------------------

    # Loop principal do BFS
    passo = 0
    while fila:
        passo += 1
        print(f"\n===== PASSO {passo}: Explorando a Fila =====")
        print(f"FILA ATUAL: {list(fila)}")

        # Remove o primeiro elemento da fila (FIFO - Explorando a pr√≥xima camada)
        atual = fila.popleft()
        print(f"üìç Centro ATUAL explorado (popleft): '{atual}'")
        
        # O .get(atual, []) √© uma maneira segura de buscar os vizinhos, retornando uma lista vazia se 'atual' n√£o for uma chave.
        vizinhos_mapa = mapa.get(atual, [])
        print(f"üó∫Ô∏è  Vizinhos de '{atual}': {vizinhos_mapa}")

        # Itera sobre os vizinhos do centro atual
        for vizinho in vizinhos_mapa:
            print(f"  ‚Ü™Ô∏è  Analisando Vizinho: '{vizinho}'")
            
            # Condi√ß√£o chave do BFS: S√≥ visita se ainda n√£o foi visitado
            if vizinho not in visitados:
                
                # Marca o vizinho como visitado
                visitados.add(vizinho)
                print(f"  ‚úÖ '{vizinho}' N√ÉO VISITADO. Adicionado a 'visitados': {visitados}")

                # Armazena o centro atual como pai do vizinho (Para reconstru√ß√£o do caminho)
                pais[vizinho] = atual
                print(f"  üîó Definido PARENTESCO: '{vizinho}' tem pai '{atual}'. Pais atuais: {json.dumps(pais)}")

                # Se encontramos o destino, reconstru√≠mos o caminho
                if vizinho == destino:
                    print(f"\n‚≠ê DESTINO ENCONTRADO: '{destino}'!")
                    
                    # --- RECONSTRU√á√ÉO DO CAMINHO ---
                    caminho = [destino]
                    
                    # Usa o dicion√°rio 'pais' para retroceder do destino ao in√≠cio
                    print(f"‚è™ Iniciando Reconstru√ß√£o do Caminho via 'pais':")
                    while caminho[-1] != inicio:
                        proximo_pai = pais[caminho[-1]]
                        caminho.append(proximo_pai)
                        print(f"   -> Adicionando Pai: '{proximo_pai}'. Caminho Tempor√°rio: {caminho}")
                        
                    caminho.reverse()  # Inverte a ordem para mostrar do in√≠cio ao destino
                    print(f"üéâ Caminho Mais Curto (invertido): {caminho}")
                    print("=" * 60)
                    return caminho

                # Adiciona o vizinho √† fila para continuar a busca na pr√≥xima "camada"
                fila.append(vizinho)
                print(f"  ‚û°Ô∏è  '{vizinho}' adicionado √† FILA para pr√≥xima camada. Nova Fila: {list(fila)}")
            else:
                print(f"  ‚ùå '{vizinho}' J√Å VISITADO. Ignorando.")


    # Se o loop terminar e o destino n√£o foi encontrado
    print(f"\n‚ùå Fila vazia. O destino '{destino}' √© inating√≠vel a partir de '{inicio}'.")
    print("=" * 60)
    return []


# -----------------------------
# Dados de Teste
# -----------------------------


# Definindo um mapa de centros de distribui√ß√£o como um grafo
mapa_exemplo = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E', 'G'],
    'G': ['F']
}


"""
Representa√ß√£o Visual do Grafo:

         A
       /   \
     B ----- C
    / \     /
   D   E -- F -- G
"""


# Testando a fun√ß√£o com diferentes cen√°rios

print("\n" * 2)
print("=" * 60)
print("RESULTADOS FINAIS DA BUSCA EM LARGURA (BFS)")
print("=" * 60)

# Caminho de A para G: ['A', 'C', 'F', 'G'] (Passa por C primeiro pois C √© um vizinho antes de B ser processado completamente)
print("Caminho de A para G:", encontrar_caminho_mais_curto(mapa_exemplo, 'A', 'G'))

# Caminho de A para D: ['A', 'B', 'D']
#print("Caminho de A para D:", encontrar_caminho_mais_curto(mapa_exemplo, 'A', 'D'))

# Caminho de A para A: ['A']
#print("Caminho de A para A:", encontrar_caminho_mais_curto(mapa_exemplo, 'A', 'A'))

# Caminho de D para G: ['D', 'B', 'E', 'F', 'G']
#print("Caminho de D para G:", encontrar_caminho_mais_curto(mapa_exemplo, 'D', 'G'))

# Caminho de G para A: ['G', 'F', 'C', 'A']
#print("Caminho de G para A:", encontrar_caminho_mais_curto(mapa_exemplo, 'G', 'A'))

# Caminho de A para Z (inexistente): []
#print("Caminho de A para Z (inexistente):", encontrar_caminho_mais_curto(mapa_exemplo, 'A', 'Z'))